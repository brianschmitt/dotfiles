[user]
    name = Brian Schmitt
    useConfigOnly = true
[color]
    ui = auto
[core]
    editor = vim
    excludesfile = ~/.global_ignore
    filemode = false
[pretty]
    lg = %x09%C(yellow)%h %C(reset)%s %C(green)(%cr) %C(bold blue)<%cn> %C(red)%d%C(reset)
[alias]
    alias = config --global --includes --get-regexp alias
    bdone = "!f() { git checkout ${1-master} && git up && git bclean ${1-master}; }; f"
    br = branch
    changes = diff ..origin/master
    ca = commit --amend --no-edit
    ci = commit
    cleanup = "!f() { git branch --merged ${1-master} | grep -v " ${1-master}$" | xargs -r git branch -d; }; f"
    cleanupall = "!f() { find . -name .git -type d 2>/dev/null|while read -r l;do (pushd \"$l/../\"&&git pull&&git cleanup&&popd > /dev/null);echo;done }; f"
    co = checkout
    cob = checkout -b
    conflicts = !git ls-files -u | cut -f 2 | sort -u
    cv = commit -v
    dc = diff --cached
    df = diff --color --color-words --abbrev
    dh = "!f() { git diff HEAD~$1; }; f"
    diff = diff -w
    fo = fetch origin
    ignored = ls-files -o -i --exclude-standard # Show files ignored by git
    la = log --pretty=lg --date=relative --graph --all
    lab = "!f() { find . -name .git -type d 2>/dev/null|while read -r l;do (pushd "$l/../"&&git branch --list&&git status -sb&&popd > /dev/null);echo;done }; f"
    lg = log --pretty=lg --date=relative --graph
    ll = log --pretty=lg --numstat
    migrate = "!f(){ CURRENT=$(git symbolic-ref --short HEAD); git checkout -b $1 && git branch --force $CURRENT ${3-'$CURRENT@{u}'} && git rebase --onto ${2-master} $CURRENT; }; f"
    open = "!f() { REPO_URL=$(git config remote.origin.url); start ${REPO_URL%%.git}; }; f"
    prune = git remote update --prune
    pullall = "!f() { find . -name .git -type d 2>/dev/null|while read -r l;do (pushd \"$l/../\"&&git pull&&git status -sb&&popd > /dev/null);echo;done }; f"
    rom = pull --rebase origin master
    spa = !git stash && git pull && git stash pop
    srom = !git stash && git pull --rebase origin master && git stash pop
    st = status -sb
    stash = stash --include-untracked
    uncommit = reset --soft HEAD^
    undo = "!f() { git reset --hard $(git rev-parse --abbrev-ref HEAD)@{${1-1}}; }; f"
    unsynced = "!f() { find . -name .git -type d 2>/dev/null|while read -r l;do (pushd \"$l/../\"&&git fetch&&git status -sb&&popd > /dev/null);echo;done }; f"
    up = !git pull --rebase --prune $@ && git submodule update --init --recursive
    wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard
[push]
    default = current
[pull]
    rebase = true
[fetch]
    prune = true
[rebase]
    autosquash = true
[status]
    showUntrackedFiles = all
[help]
    autocorrect = 1
[merge]
    tool = vscode
[mergetool "vscode"]
    cmd = "code --wait $MERGED"
[diff]
    tool = vscode
[difftool "vscode"]
    cmd = "code --wait --diff $LOCAL $REMOTE"
[filter "lfs"]
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true
    clean = git-lfs clean -- %f